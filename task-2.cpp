#include <iostream>   // Підключення бібліотеки для вводу/виводу, що надає std::cout для виведення інформації на екран.
#include <cstdlib>    // Підключення бібліотеки, яка містить функцію rand() для генерації випадкових чисел.
#include <ctime>      // Підключення бібліотеки для роботи з функцією time(), що використовується для ініціалізації генератора випадкових чисел.
using namespace std;  // Дозволяє використовувати стандартні об’єкти (наприклад, cout) без префікса "std::".

int main() {
    // =======================================================================
    // 1. Визначення розмірів матриці та динамічне виділення пам’яті
    // =======================================================================
    int rows = 3;   // Кількість рядків матриці (3)
    int cols = 3;   // Кількість стовпців матриці (3)
    
    // Виділення пам’яті для 3×3 матриці у вигляді контінуючого блоку пам’яті.
    // Оператор new виділяє (rows * cols) елементів типу int.
    // Результатом є вказівник на перший елемент цього блоку.
    int* matrix = new int[rows * cols];
    // На апаратному рівні: виділено блок пам’яті розміром (3*3*sizeof(int)) байтів.
    // Вказівник "matrix" містить адресу першого байта цього блоку.

    // =======================================================================
    // 2. Ініціалізація генератора випадкових чисел
    // =======================================================================
    // Функція time(NULL) повертає поточний час; його використання як seed гарантує,
    // що кожного разу при запуску програми послідовність випадкових чисел буде різною.
    srand(static_cast<unsigned int>(time(NULL)));
    
    // =======================================================================
    // 3. Заповнення матриці випадковими значеннями
    // =======================================================================
    // Ми організовуємо заповнення, обходячи матрицю як один контінуючий масив.
    // Створюємо вказівник "p", який на початку вказує на адресу першого елемента.
    int* p = matrix;
    // Обчислюємо кінцеву адресу блоку пам’яті, що знаходиться одразу після останнього елемента.
    int* end = matrix + rows * cols;  // Адреса останнього елемента + 1
    
    // Цикл while проходить по всіх елементах матриці.
    while (p < end) {
        // Функція rand() генерує випадкове ціле число від 0 до RAND_MAX.
        // Вираз rand() % 21 обмежує результат діапазоном від 0 до 20,
        // а віднімання 10 перетворює діапазон на [-10, 10].
        // Отже, кожен елемент матриці отримає випадкове значення з цього діапазону.
        *p = rand() % 21 - 10;
        // Розіменування *p дає доступ до значення за адресою, яку містить p.
        // На рівні машинного коду це означає запис нового значення у відповідну позицію пам’яті.
        
        // Оператор p++ збільшує адресу, що міститься у вказівнику, на розмір одного елемента типу int.
        // Це дозволяє переміститися до наступного елемента матриці.
        p++;
    }
    // Після заповнення, p вже дорівнює end (адреса після останнього елемента).
    
    // =======================================================================
    // 4. Вивід матриці (форматовано у вигляді 3×3)
    // =======================================================================
    cout << "Matrix:" << endl;
    // Обходимо матрицю по рядках.
    for (int i = 0; i < rows; i++) {
        // Обчислюємо адресу початку i-го рядка:
        // В контінуючому блоці кожний рядок містить "cols" елементів, тому:
        // адреса рядка i = matrix + i * cols.
        int* rowPtr = matrix + i * cols;
        // Обходимо кожен стовпець у поточному рядку.
        for (int j = 0; j < cols; j++) {
            // *(rowPtr + j) отримує значення j-го елемента поточного рядка.
            cout << *(rowPtr + j) << "\t";  // Вивід елемента з табуляцією для форматування.
        }
        cout << endl;  // Перехід на новий рядок після завершення рядка матриці.
    }
    
    // =======================================================================
    // 5. Вивід елементів головної діагоналі
    // =======================================================================
    // Головна діагональ — це елементи, для яких номер рядка дорівнює номеру стовпця.
    // У контінуючому блоці матриці елемент головної діагоналі для рядка i знаходиться за адресою:
    // matrix + i * cols + i.
    cout << "\nMain Diagonal:" << endl;
    for (int i = 0; i < rows; i++) {
        // Розіменування *(matrix + i*cols + i) отримує елемент з головної діагоналі.
        cout << *(matrix + i * cols + i) << " ";
    }
    cout << endl;
    
    // =======================================================================
    // 6. Вивід елементів побічної діагоналі
    // =======================================================================
    // Побічна (контр) діагональ — це елементи, для яких сума номера рядка та номера стовпця дорівнює (cols - 1).
    // Для рядка i елемент побічної діагоналі знаходиться за адресою:
    // matrix + i * cols + (cols - 1 - i).
    cout << "\nAdditional diagonal:" << endl;
    for (int i = 0; i < rows; i++) {
        cout << *(matrix + i * cols + (cols - 1 - i)) << " ";
    }
    cout << endl;
    
    // =======================================================================
    // 7. Підрахунок кількості парних та непарних елементів
    // =======================================================================
    int evenCount = 0;  // Лічильник парних чисел.
    int oddCount = 0;   // Лічильник непарних чисел.
    // Знову встановлюємо вказівник p на початок матриці.
    p = matrix;
    // Проходимо по всіх (rows * cols) елементах матриці.
    while (p < end) {
        // Якщо залишок від ділення елемента на 2 дорівнює 0, число є парним.
        if ((*p) % 2 == 0) {
            evenCount++;
        } else {
            oddCount++;  // Інакше — непарне.
        }
        // Переміщення до наступного елемента.
        p++;
    }
    // Вивід результатів підрахунку.
    cout << "\nAmount of even nums: " << evenCount << endl;
    cout << "Amount of uneven nums: " << oddCount << endl;
    
    // =======================================================================
    // 8. Звільнення динамічно виділеної пам’яті
    // =======================================================================
    // Оператор delete[] звільняє пам’ять, яка була виділена оператором new.
    // Це критично важливо для запобігання витоків пам’яті.
    delete [] matrix;
    
    // Завершення роботи програми. Повернення 0 вказує на успішне виконання.
    return 0;
}
